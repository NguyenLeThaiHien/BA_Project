{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "gpuType": "T4"
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    },
    "accelerator": "GPU",
    "gpuClass": "standard"
  },
  "cells": [
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "id": "Ut552Xmq1O8N"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "from tensorflow.keras.models import Sequential\n",
        "from tensorflow.keras.layers import Conv1D, MaxPooling1D, Flatten, Dense"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Read dataset file\n",
        "df = pd.read_csv('/ETH.csv')\n",
        "df = df[['Price']]\n",
        "df = df.dropna()\n",
        "df"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        },
        "id": "gEE-U3gn1r2W",
        "outputId": "d8b3f329-684d-4e03-f9f4-7243203e0df6"
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "        Price\n",
              "0      693.28\n",
              "1      696.76\n",
              "2      716.02\n",
              "3      696.85\n",
              "4      642.17\n",
              "...       ...\n",
              "1822  1799.36\n",
              "1823  1817.11\n",
              "1824  1823.98\n",
              "1825  1821.73\n",
              "1826  1800.99\n",
              "\n",
              "[1827 rows x 1 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-90ccb19e-cf76-4992-8251-ba525c718f28\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Price</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>693.28</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>696.76</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>716.02</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>696.85</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>642.17</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1822</th>\n",
              "      <td>1799.36</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1823</th>\n",
              "      <td>1817.11</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1824</th>\n",
              "      <td>1823.98</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1825</th>\n",
              "      <td>1821.73</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1826</th>\n",
              "      <td>1800.99</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>1827 rows Ã— 1 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-90ccb19e-cf76-4992-8251-ba525c718f28')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-90ccb19e-cf76-4992-8251-ba525c718f28 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-90ccb19e-cf76-4992-8251-ba525c718f28');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 2
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Split the data into training, testing, and validation sets\n",
        "train_size = int(0.7 * len(df))\n",
        "test_size = int(0.2 * len(df))\n",
        "val_size = len(df) - train_size - test_size\n",
        "\n",
        "train_data = df[:train_size]\n",
        "test_data = df[train_size:train_size+test_size]\n",
        "val_data = df[train_size+test_size:]"
      ],
      "metadata": {
        "id": "oDkSuGJm2GXa"
      },
      "execution_count": 3,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Normalize the data\n",
        "mean = train_data.mean()\n",
        "meant = test_data.mean()\n",
        "meanv = val_data.mean()\n",
        "std = train_data.std()\n",
        "stdt = test_data.std()\n",
        "stdv = val_data.std()\n",
        "train_data = (train_data - mean) / std\n",
        "test_data = (test_data - meant) / stdt\n",
        "val_data = (val_data - meanv) / stdv"
      ],
      "metadata": {
        "id": "p-ZDchgy2SCA"
      },
      "execution_count": 4,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Prepare the data for CNN\n",
        "window_size = 10\n",
        "\n",
        "def create_sequences(data, window_size):\n",
        "    X = []\n",
        "    y = []\n",
        "    for i in range(len(data) - window_size):\n",
        "        X.append(data[i:i+window_size])\n",
        "        y.append(data[i+window_size])\n",
        "    return np.array(X), np.array(y)\n",
        "\n",
        "X_train, y_train = create_sequences(train_data.values, window_size)\n",
        "X_test, y_test = create_sequences(test_data.values, window_size)\n",
        "X_val, y_val = create_sequences(val_data.values, window_size)\n"
      ],
      "metadata": {
        "id": "HT8OLwhF2VfJ"
      },
      "execution_count": 5,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Build the CNN model\n",
        "model = Sequential()\n",
        "model.add(Conv1D(filters=32, kernel_size=3, activation='relu', input_shape=(window_size, 1)))\n",
        "model.add(MaxPooling1D(pool_size=2))\n",
        "model.add(Flatten())\n",
        "model.add(Dense(64, activation='relu'))\n",
        "model.add(Dense(1))\n",
        "\n",
        "model.compile(optimizer='adam', loss='mse')"
      ],
      "metadata": {
        "id": "zIexGZ5W3atX"
      },
      "execution_count": 6,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Train the model\n",
        "model.fit(X_train, y_train, epochs=100, batch_size=32, validation_data=(X_val, y_val))\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "EqYPxtyA3cky",
        "outputId": "2c3e90ad-7d12-43f9-e939-45d9607f8478"
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/100\n",
            "40/40 [==============================] - 10s 10ms/step - loss: 0.3105 - val_loss: 0.1195\n",
            "Epoch 2/100\n",
            "40/40 [==============================] - 0s 4ms/step - loss: 0.0186 - val_loss: 0.0982\n",
            "Epoch 3/100\n",
            "40/40 [==============================] - 0s 4ms/step - loss: 0.0148 - val_loss: 0.0916\n",
            "Epoch 4/100\n",
            "40/40 [==============================] - 0s 4ms/step - loss: 0.0138 - val_loss: 0.0834\n",
            "Epoch 5/100\n",
            "40/40 [==============================] - 0s 4ms/step - loss: 0.0124 - val_loss: 0.0802\n",
            "Epoch 6/100\n",
            "40/40 [==============================] - 0s 4ms/step - loss: 0.0117 - val_loss: 0.0724\n",
            "Epoch 7/100\n",
            "40/40 [==============================] - 0s 4ms/step - loss: 0.0101 - val_loss: 0.0668\n",
            "Epoch 8/100\n",
            "40/40 [==============================] - 0s 4ms/step - loss: 0.0101 - val_loss: 0.0651\n",
            "Epoch 9/100\n",
            "40/40 [==============================] - 0s 4ms/step - loss: 0.0086 - val_loss: 0.0611\n",
            "Epoch 10/100\n",
            "40/40 [==============================] - 0s 4ms/step - loss: 0.0097 - val_loss: 0.0618\n",
            "Epoch 11/100\n",
            "40/40 [==============================] - 0s 4ms/step - loss: 0.0082 - val_loss: 0.0573\n",
            "Epoch 12/100\n",
            "40/40 [==============================] - 0s 4ms/step - loss: 0.0075 - val_loss: 0.0548\n",
            "Epoch 13/100\n",
            "40/40 [==============================] - 0s 4ms/step - loss: 0.0074 - val_loss: 0.0539\n",
            "Epoch 14/100\n",
            "40/40 [==============================] - 0s 4ms/step - loss: 0.0069 - val_loss: 0.0552\n",
            "Epoch 15/100\n",
            "40/40 [==============================] - 0s 4ms/step - loss: 0.0068 - val_loss: 0.0500\n",
            "Epoch 16/100\n",
            "40/40 [==============================] - 0s 4ms/step - loss: 0.0073 - val_loss: 0.0506\n",
            "Epoch 17/100\n",
            "40/40 [==============================] - 0s 4ms/step - loss: 0.0066 - val_loss: 0.0527\n",
            "Epoch 18/100\n",
            "40/40 [==============================] - 0s 4ms/step - loss: 0.0066 - val_loss: 0.0475\n",
            "Epoch 19/100\n",
            "40/40 [==============================] - 0s 4ms/step - loss: 0.0061 - val_loss: 0.0481\n",
            "Epoch 20/100\n",
            "40/40 [==============================] - 0s 4ms/step - loss: 0.0066 - val_loss: 0.0463\n",
            "Epoch 21/100\n",
            "40/40 [==============================] - 0s 4ms/step - loss: 0.0067 - val_loss: 0.0488\n",
            "Epoch 22/100\n",
            "40/40 [==============================] - 0s 4ms/step - loss: 0.0061 - val_loss: 0.0472\n",
            "Epoch 23/100\n",
            "40/40 [==============================] - 0s 4ms/step - loss: 0.0099 - val_loss: 0.0485\n",
            "Epoch 24/100\n",
            "40/40 [==============================] - 0s 4ms/step - loss: 0.0081 - val_loss: 0.0450\n",
            "Epoch 25/100\n",
            "40/40 [==============================] - 0s 4ms/step - loss: 0.0061 - val_loss: 0.0447\n",
            "Epoch 26/100\n",
            "40/40 [==============================] - 0s 4ms/step - loss: 0.0060 - val_loss: 0.0465\n",
            "Epoch 27/100\n",
            "40/40 [==============================] - 0s 4ms/step - loss: 0.0056 - val_loss: 0.0446\n",
            "Epoch 28/100\n",
            "40/40 [==============================] - 0s 5ms/step - loss: 0.0063 - val_loss: 0.0456\n",
            "Epoch 29/100\n",
            "40/40 [==============================] - 0s 4ms/step - loss: 0.0056 - val_loss: 0.0439\n",
            "Epoch 30/100\n",
            "40/40 [==============================] - 0s 4ms/step - loss: 0.0057 - val_loss: 0.0438\n",
            "Epoch 31/100\n",
            "40/40 [==============================] - 0s 4ms/step - loss: 0.0058 - val_loss: 0.0444\n",
            "Epoch 32/100\n",
            "40/40 [==============================] - 0s 4ms/step - loss: 0.0057 - val_loss: 0.0438\n",
            "Epoch 33/100\n",
            "40/40 [==============================] - 0s 4ms/step - loss: 0.0073 - val_loss: 0.0440\n",
            "Epoch 34/100\n",
            "40/40 [==============================] - 0s 4ms/step - loss: 0.0061 - val_loss: 0.0437\n",
            "Epoch 35/100\n",
            "40/40 [==============================] - 0s 4ms/step - loss: 0.0060 - val_loss: 0.0429\n",
            "Epoch 36/100\n",
            "40/40 [==============================] - 0s 5ms/step - loss: 0.0058 - val_loss: 0.0429\n",
            "Epoch 37/100\n",
            "40/40 [==============================] - 0s 6ms/step - loss: 0.0057 - val_loss: 0.0422\n",
            "Epoch 38/100\n",
            "40/40 [==============================] - 0s 6ms/step - loss: 0.0060 - val_loss: 0.0425\n",
            "Epoch 39/100\n",
            "40/40 [==============================] - 0s 5ms/step - loss: 0.0066 - val_loss: 0.0471\n",
            "Epoch 40/100\n",
            "40/40 [==============================] - 0s 5ms/step - loss: 0.0062 - val_loss: 0.0406\n",
            "Epoch 41/100\n",
            "40/40 [==============================] - 0s 6ms/step - loss: 0.0057 - val_loss: 0.0411\n",
            "Epoch 42/100\n",
            "40/40 [==============================] - 0s 5ms/step - loss: 0.0055 - val_loss: 0.0406\n",
            "Epoch 43/100\n",
            "40/40 [==============================] - 0s 5ms/step - loss: 0.0052 - val_loss: 0.0406\n",
            "Epoch 44/100\n",
            "40/40 [==============================] - 0s 5ms/step - loss: 0.0053 - val_loss: 0.0398\n",
            "Epoch 45/100\n",
            "40/40 [==============================] - 0s 5ms/step - loss: 0.0054 - val_loss: 0.0392\n",
            "Epoch 46/100\n",
            "40/40 [==============================] - 0s 5ms/step - loss: 0.0059 - val_loss: 0.0415\n",
            "Epoch 47/100\n",
            "40/40 [==============================] - 0s 4ms/step - loss: 0.0061 - val_loss: 0.0464\n",
            "Epoch 48/100\n",
            "40/40 [==============================] - 0s 4ms/step - loss: 0.0062 - val_loss: 0.0400\n",
            "Epoch 49/100\n",
            "40/40 [==============================] - 0s 4ms/step - loss: 0.0054 - val_loss: 0.0388\n",
            "Epoch 50/100\n",
            "40/40 [==============================] - 0s 4ms/step - loss: 0.0055 - val_loss: 0.0434\n",
            "Epoch 51/100\n",
            "40/40 [==============================] - 0s 4ms/step - loss: 0.0058 - val_loss: 0.0407\n",
            "Epoch 52/100\n",
            "40/40 [==============================] - 0s 4ms/step - loss: 0.0053 - val_loss: 0.0401\n",
            "Epoch 53/100\n",
            "40/40 [==============================] - 0s 4ms/step - loss: 0.0063 - val_loss: 0.0388\n",
            "Epoch 54/100\n",
            "40/40 [==============================] - 0s 4ms/step - loss: 0.0054 - val_loss: 0.0388\n",
            "Epoch 55/100\n",
            "40/40 [==============================] - 0s 4ms/step - loss: 0.0053 - val_loss: 0.0390\n",
            "Epoch 56/100\n",
            "40/40 [==============================] - 0s 4ms/step - loss: 0.0051 - val_loss: 0.0387\n",
            "Epoch 57/100\n",
            "40/40 [==============================] - 0s 4ms/step - loss: 0.0053 - val_loss: 0.0397\n",
            "Epoch 58/100\n",
            "40/40 [==============================] - 0s 4ms/step - loss: 0.0049 - val_loss: 0.0388\n",
            "Epoch 59/100\n",
            "40/40 [==============================] - 0s 4ms/step - loss: 0.0064 - val_loss: 0.0409\n",
            "Epoch 60/100\n",
            "40/40 [==============================] - 0s 4ms/step - loss: 0.0058 - val_loss: 0.0401\n",
            "Epoch 61/100\n",
            "40/40 [==============================] - 0s 4ms/step - loss: 0.0056 - val_loss: 0.0381\n",
            "Epoch 62/100\n",
            "40/40 [==============================] - 0s 4ms/step - loss: 0.0049 - val_loss: 0.0385\n",
            "Epoch 63/100\n",
            "40/40 [==============================] - 0s 4ms/step - loss: 0.0051 - val_loss: 0.0383\n",
            "Epoch 64/100\n",
            "40/40 [==============================] - 0s 4ms/step - loss: 0.0053 - val_loss: 0.0398\n",
            "Epoch 65/100\n",
            "40/40 [==============================] - 0s 4ms/step - loss: 0.0053 - val_loss: 0.0386\n",
            "Epoch 66/100\n",
            "40/40 [==============================] - 0s 4ms/step - loss: 0.0064 - val_loss: 0.0368\n",
            "Epoch 67/100\n",
            "40/40 [==============================] - 0s 4ms/step - loss: 0.0048 - val_loss: 0.0397\n",
            "Epoch 68/100\n",
            "40/40 [==============================] - 0s 4ms/step - loss: 0.0055 - val_loss: 0.0365\n",
            "Epoch 69/100\n",
            "40/40 [==============================] - 0s 4ms/step - loss: 0.0050 - val_loss: 0.0377\n",
            "Epoch 70/100\n",
            "40/40 [==============================] - 0s 4ms/step - loss: 0.0058 - val_loss: 0.0372\n",
            "Epoch 71/100\n",
            "40/40 [==============================] - 0s 4ms/step - loss: 0.0052 - val_loss: 0.0366\n",
            "Epoch 72/100\n",
            "40/40 [==============================] - 0s 4ms/step - loss: 0.0055 - val_loss: 0.0385\n",
            "Epoch 73/100\n",
            "40/40 [==============================] - 0s 4ms/step - loss: 0.0054 - val_loss: 0.0388\n",
            "Epoch 74/100\n",
            "40/40 [==============================] - 0s 4ms/step - loss: 0.0049 - val_loss: 0.0397\n",
            "Epoch 75/100\n",
            "40/40 [==============================] - 0s 4ms/step - loss: 0.0053 - val_loss: 0.0381\n",
            "Epoch 76/100\n",
            "40/40 [==============================] - 0s 4ms/step - loss: 0.0050 - val_loss: 0.0407\n",
            "Epoch 77/100\n",
            "40/40 [==============================] - 0s 4ms/step - loss: 0.0066 - val_loss: 0.0371\n",
            "Epoch 78/100\n",
            "40/40 [==============================] - 0s 4ms/step - loss: 0.0053 - val_loss: 0.0374\n",
            "Epoch 79/100\n",
            "40/40 [==============================] - 0s 4ms/step - loss: 0.0052 - val_loss: 0.0369\n",
            "Epoch 80/100\n",
            "40/40 [==============================] - 0s 4ms/step - loss: 0.0049 - val_loss: 0.0391\n",
            "Epoch 81/100\n",
            "40/40 [==============================] - 0s 4ms/step - loss: 0.0057 - val_loss: 0.0391\n",
            "Epoch 82/100\n",
            "40/40 [==============================] - 0s 4ms/step - loss: 0.0053 - val_loss: 0.0362\n",
            "Epoch 83/100\n",
            "40/40 [==============================] - 0s 4ms/step - loss: 0.0055 - val_loss: 0.0368\n",
            "Epoch 84/100\n",
            "40/40 [==============================] - 0s 4ms/step - loss: 0.0052 - val_loss: 0.0367\n",
            "Epoch 85/100\n",
            "40/40 [==============================] - 0s 4ms/step - loss: 0.0050 - val_loss: 0.0394\n",
            "Epoch 86/100\n",
            "40/40 [==============================] - 0s 4ms/step - loss: 0.0047 - val_loss: 0.0365\n",
            "Epoch 87/100\n",
            "40/40 [==============================] - 0s 4ms/step - loss: 0.0052 - val_loss: 0.0373\n",
            "Epoch 88/100\n",
            "40/40 [==============================] - 0s 4ms/step - loss: 0.0046 - val_loss: 0.0383\n",
            "Epoch 89/100\n",
            "40/40 [==============================] - 0s 4ms/step - loss: 0.0047 - val_loss: 0.0391\n",
            "Epoch 90/100\n",
            "40/40 [==============================] - 0s 4ms/step - loss: 0.0048 - val_loss: 0.0363\n",
            "Epoch 91/100\n",
            "40/40 [==============================] - 0s 4ms/step - loss: 0.0053 - val_loss: 0.0363\n",
            "Epoch 92/100\n",
            "40/40 [==============================] - 0s 4ms/step - loss: 0.0047 - val_loss: 0.0360\n",
            "Epoch 93/100\n",
            "40/40 [==============================] - 0s 4ms/step - loss: 0.0049 - val_loss: 0.0381\n",
            "Epoch 94/100\n",
            "40/40 [==============================] - 0s 4ms/step - loss: 0.0049 - val_loss: 0.0364\n",
            "Epoch 95/100\n",
            "40/40 [==============================] - 0s 4ms/step - loss: 0.0053 - val_loss: 0.0374\n",
            "Epoch 96/100\n",
            "40/40 [==============================] - 0s 4ms/step - loss: 0.0064 - val_loss: 0.0378\n",
            "Epoch 97/100\n",
            "40/40 [==============================] - 0s 4ms/step - loss: 0.0056 - val_loss: 0.0367\n",
            "Epoch 98/100\n",
            "40/40 [==============================] - 0s 4ms/step - loss: 0.0047 - val_loss: 0.0379\n",
            "Epoch 99/100\n",
            "40/40 [==============================] - 0s 4ms/step - loss: 0.0046 - val_loss: 0.0372\n",
            "Epoch 100/100\n",
            "40/40 [==============================] - 0s 4ms/step - loss: 0.0047 - val_loss: 0.0382\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<keras.callbacks.History at 0x7fc63ca8b010>"
            ]
          },
          "metadata": {},
          "execution_count": 7
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Make predictions\n",
        "y_pred = model.predict(X_test)\n",
        "# Inverse transform the predictions\n",
        "y_pred = y_pred * pd.Series(stdt).values[0] + pd.Series(meant).values[0]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "j30RbOEf3eLd",
        "outputId": "ddaee209-6894-4fc7-cf24-4223e163a0e3"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "12/12 [==============================] - 0s 3ms/step\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Make predictions\n",
        "y_vpred = model.predict(X_val)\n",
        "# Inverse transform the predictions\n",
        "y_vpred = y_vpred * pd.Series(stdv).values[0] + pd.Series(meanv).values[0]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "zD8hFfaH3sXm",
        "outputId": "17c31888-4a91-4cf6-e574-b6e1cdcd5c2a"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "6/6 [==============================] - 0s 2ms/step\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        },
        "id": "6GvbpBMF3wFz",
        "outputId": "458f45e8-3bbc-4fcc-bc44-94cc76f3d7fd"
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "        Price\n",
              "0      693.28\n",
              "1      696.76\n",
              "2      716.02\n",
              "3      696.85\n",
              "4      642.17\n",
              "...       ...\n",
              "1822  1799.36\n",
              "1823  1817.11\n",
              "1824  1823.98\n",
              "1825  1821.73\n",
              "1826  1800.99\n",
              "\n",
              "[1827 rows x 1 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-f79a159d-66dd-4623-b252-5f520f1f5c2c\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Price</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>693.28</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>696.76</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>716.02</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>696.85</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>642.17</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1822</th>\n",
              "      <td>1799.36</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1823</th>\n",
              "      <td>1817.11</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1824</th>\n",
              "      <td>1823.98</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1825</th>\n",
              "      <td>1821.73</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1826</th>\n",
              "      <td>1800.99</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>1827 rows Ã— 1 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f79a159d-66dd-4623-b252-5f520f1f5c2c')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-f79a159d-66dd-4623-b252-5f520f1f5c2c button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-f79a159d-66dd-4623-b252-5f520f1f5c2c');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 10
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "train_size = int(0.7 * len(df))\n",
        "test_size = int(0.2 * len(df))\n",
        "val_size = len(df) - train_size - test_size\n",
        "\n",
        "train_data = df[:train_size]\n",
        "test_data = df[train_size:train_size+test_size]\n",
        "val_data = df[train_size+test_size:]\n",
        "# re make predictions on the testing set\n",
        "x_test = np.array(test_data.index).reshape(-1, 1)\n",
        "y_test = np.array(test_data['Price'])\n",
        "# re make predictions on the validate set\n",
        "x_val = np.array(val_data.index).reshape(-1, 1)\n",
        "y_val = np.array(val_data['Price'])\n",
        "train_data = df[:train_size]\n",
        "test_data = df[train_size:train_size+test_size]\n",
        "val_data = df[train_size+test_size:]\n",
        "# calculate the RMSE\n",
        "valid_rmse = np.sqrt(np.mean((y_vpred - y_val)**2))\n",
        "test_rmse = np.sqrt(np.mean((y_pred - y_test)**2))\n",
        "print('Validation RMSE:', valid_rmse)\n",
        "print('Testing RMSE:', test_rmse)\n",
        "\n",
        "# calculate the MAPE\n",
        "valid_mape = np.mean(np.abs((y_val - y_vpred) / y_val)) * 100\n",
        "test_mape = np.mean(np.abs((y_test - y_pred) / y_test)) * 100\n",
        "print(\"Validation MAPE:\", valid_mape)\n",
        "print(\"Testing MAPE:\", test_mape)\n",
        "\n",
        "# calculate the MAE\n",
        "valid_mae = np.mean(np.abs(y_vpred - y_val))\n",
        "test_mae = np.mean(np.abs(y_pred - y_test))\n",
        "print(\"Validation MAE:\", valid_mae)\n",
        "print(\"Testing MAPE:\", test_mape)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Kap2YTi44Emr",
        "outputId": "95043ee9-1a91-4bf7-ddc2-1976e02f5c30"
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Validation RMSE: 374.6103693423728\n",
            "Testing RMSE: 1390.3484791564247\n",
            "Validation MAPE: 20.110525254905845\n",
            "Testing MAPE: 53.77732464497298\n",
            "Validation MAE: 300.60155435984404\n",
            "Testing MAPE: 53.77732464497298\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# ploting the actual values and predicted values\n",
        "plt.plot(train_data.index, train_data['Price'])\n",
        "plt.plot(test_data.index, test_data['Price'])\n",
        "plt.plot(val_data.index, val_data['Price'])\n",
        "plt.plot(test_data.index[-len(y_pred):], y_pred)\n",
        "plt.plot(val_data.index[-len(y_vpred):], y_vpred)\n",
        "plt.legend(['Train', 'Test','Validate', 'Predictions_test','Predictions_validate'])\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 432
        },
        "id": "dd8GpZQ69LJI",
        "outputId": "6a568388-d409-4d3f-b1df-9bbced11a905"
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "y_val"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "IFQBwxui4NGd",
        "outputId": "325713cb-230f-4e91-adfb-21944acd1f67"
      },
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([1206.16, 1205.17, 1207.31, 1217.65, 1142.88, 1107.46, 1139.74,\n",
              "       1185.79, 1203.77, 1198.12, 1205.15, 1193.38, 1167.73, 1216.55,\n",
              "       1294.41, 1276.05, 1295.69, 1240.46, 1279.74, 1259.56, 1271.26,\n",
              "       1231.04, 1280.29, 1262.86, 1266.62, 1263.42, 1275.02, 1320.76,\n",
              "       1307.3 , 1266.32, 1166.7 , 1187.18, 1182.7 , 1167.8 , 1217.2 ,\n",
              "       1213.85, 1217.57, 1220.03, 1220.46, 1218.69, 1227.65, 1211.6 ,\n",
              "       1189.98, 1200.84, 1199.8 , 1195.67, 1200.52, 1213.93, 1214.57,\n",
              "       1256.92, 1250.95, 1269.14, 1263.9 , 1288.38, 1320.51, 1335.13,\n",
              "       1389.84, 1416.08, 1450.86, 1550.02, 1552.69, 1576.94, 1564.67,\n",
              "       1511.31, 1551.62, 1659.98, 1625.53, 1627.03, 1626.53, 1556.15,\n",
              "       1611.2 , 1602.55, 1597.6 , 1573.07, 1645.97, 1566.5 , 1585.27,\n",
              "       1642.1 , 1641.71, 1663.79, 1666.9 , 1629.44, 1613.72, 1671.4 ,\n",
              "       1650.99, 1545.35, 1513.82, 1538.34, 1515.44, 1505.84, 1555.46,\n",
              "       1675.43, 1640.66, 1693.96, 1691.62, 1681.52, 1703.27, 1659.41,\n",
              "       1643.39, 1650.52, 1608.24, 1594.66, 1641.6 , 1633.66, 1604.69,\n",
              "       1666.09, 1647.38, 1568.89, 1566.73, 1564.37, 1565.84, 1561.78,\n",
              "       1533.04, 1438.5 , 1426.75, 1471.15, 1580.24, 1673.93, 1700.15,\n",
              "       1649.65, 1673.85, 1789.38, 1758.7 , 1779.47, 1732.31, 1803.54,\n",
              "       1734.48, 1814.08, 1749.26, 1742.34, 1774.06, 1714.65, 1772.63,\n",
              "       1793.27, 1793.59, 1821.62, 1820.78, 1795.01, 1810.77, 1870.52,\n",
              "       1908.96, 1872.35, 1863.46, 1848.93, 1858.9 , 1910.36, 1889.86,\n",
              "       1916.58, 2012.11, 2099.98, 2090.59, 2119.29, 2074.74, 2103.34,\n",
              "       1935.97, 1942.72, 1849.81, 1873.95, 1862.05, 1841.88, 1865.95,\n",
              "       1866.05, 1908.81, 1891.14, 1907.8 , 1868.88, 1830.75, 1869.74,\n",
              "       1904.74, 1877.06, 1993.33, 1896.48, 1870.99, 1847.48, 1846.56,\n",
              "       1840.92, 1794.71, 1807.31, 1794.95, 1799.36, 1817.11, 1823.98,\n",
              "       1821.73, 1800.99])"
            ]
          },
          "metadata": {},
          "execution_count": 13
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "y_vpred"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "vrX7jwUR5dtR",
        "outputId": "8fd5ee21-26ac-4238-f4b0-3a85aec1c8be"
      },
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[1176.7373],\n",
              "       [1187.7537],\n",
              "       [1188.4602],\n",
              "       [1163.6119],\n",
              "       [1165.0549],\n",
              "       [1207.8647],\n",
              "       [1258.7468],\n",
              "       [1253.9424],\n",
              "       [1236.4846],\n",
              "       [1229.0066],\n",
              "       [1245.0103],\n",
              "       [1249.9089],\n",
              "       [1233.4915],\n",
              "       [1234.3895],\n",
              "       [1250.4911],\n",
              "       [1244.8043],\n",
              "       [1255.6663],\n",
              "       [1259.5436],\n",
              "       [1272.0774],\n",
              "       [1303.2   ],\n",
              "       [1251.3442],\n",
              "       [1188.1311],\n",
              "       [1181.6116],\n",
              "       [1175.402 ],\n",
              "       [1177.4907],\n",
              "       [1170.8131],\n",
              "       [1205.325 ],\n",
              "       [1207.7195],\n",
              "       [1225.2615],\n",
              "       [1214.8087],\n",
              "       [1212.335 ],\n",
              "       [1216.3588],\n",
              "       [1207.5442],\n",
              "       [1185.3331],\n",
              "       [1188.3811],\n",
              "       [1190.8182],\n",
              "       [1191.467 ],\n",
              "       [1193.9769],\n",
              "       [1196.9382],\n",
              "       [1208.0701],\n",
              "       [1213.0863],\n",
              "       [1239.7699],\n",
              "       [1241.8822],\n",
              "       [1254.4453],\n",
              "       [1261.3071],\n",
              "       [1282.4602],\n",
              "       [1316.8289],\n",
              "       [1333.2803],\n",
              "       [1391.9486],\n",
              "       [1418.0272],\n",
              "       [1468.1825],\n",
              "       [1548.8385],\n",
              "       [1552.0479],\n",
              "       [1561.9539],\n",
              "       [1512.5676],\n",
              "       [1536.7043],\n",
              "       [1638.9257],\n",
              "       [1650.7471],\n",
              "       [1634.0864],\n",
              "       [1627.5245],\n",
              "       [1612.3801],\n",
              "       [1620.2008],\n",
              "       [1630.9426],\n",
              "       [1607.4126],\n",
              "       [1601.3708],\n",
              "       [1630.8608],\n",
              "       [1630.2883],\n",
              "       [1620.5405],\n",
              "       [1624.3357],\n",
              "       [1651.1643],\n",
              "       [1674.6411],\n",
              "       [1673.9302],\n",
              "       [1655.2339],\n",
              "       [1635.2618],\n",
              "       [1640.2543],\n",
              "       [1661.6659],\n",
              "       [1604.8063],\n",
              "       [1580.907 ],\n",
              "       [1583.0779],\n",
              "       [1581.2594],\n",
              "       [1554.3179],\n",
              "       [1540.7555],\n",
              "       [1626.3335],\n",
              "       [1660.1965],\n",
              "       [1686.8334],\n",
              "       [1683.074 ],\n",
              "       [1680.5742],\n",
              "       [1699.9902],\n",
              "       [1669.0792],\n",
              "       [1643.2717],\n",
              "       [1640.2104],\n",
              "       [1635.852 ],\n",
              "       [1625.0122],\n",
              "       [1630.0222],\n",
              "       [1657.8221],\n",
              "       [1632.7306],\n",
              "       [1644.1555],\n",
              "       [1668.1823],\n",
              "       [1629.0295],\n",
              "       [1601.2637],\n",
              "       [1595.6294],\n",
              "       [1601.6447],\n",
              "       [1599.9614],\n",
              "       [1573.7648],\n",
              "       [1542.0406],\n",
              "       [1533.7754],\n",
              "       [1509.6289],\n",
              "       [1520.7421],\n",
              "       [1624.1678],\n",
              "       [1697.08  ],\n",
              "       [1681.4601],\n",
              "       [1648.2102],\n",
              "       [1724.4683],\n",
              "       [1764.1108],\n",
              "       [1760.4171],\n",
              "       [1734.0283],\n",
              "       [1759.2181],\n",
              "       [1784.5781],\n",
              "       [1776.951 ],\n",
              "       [1774.2603],\n",
              "       [1748.6984],\n",
              "       [1762.5029],\n",
              "       [1760.8124],\n",
              "       [1744.7189],\n",
              "       [1803.6443],\n",
              "       [1798.9727],\n",
              "       [1815.9968],\n",
              "       [1837.7139],\n",
              "       [1819.9805],\n",
              "       [1812.1023],\n",
              "       [1846.9446],\n",
              "       [1902.4176],\n",
              "       [1907.0928],\n",
              "       [1879.3501],\n",
              "       [1856.4719],\n",
              "       [1865.6796],\n",
              "       [1904.7186],\n",
              "       [1904.7096],\n",
              "       [1914.8684],\n",
              "       [1988.3458],\n",
              "       [2078.3816],\n",
              "       [2109.6455],\n",
              "       [2122.12  ],\n",
              "       [2104.3538],\n",
              "       [2110.8472],\n",
              "       [2040.5831],\n",
              "       [1896.3585],\n",
              "       [1866.7922],\n",
              "       [1838.2684],\n",
              "       [1878.066 ],\n",
              "       [1883.8354],\n",
              "       [1881.2975],\n",
              "       [1881.8104],\n",
              "       [1900.0583],\n",
              "       [1915.4006],\n",
              "       [1913.7402],\n",
              "       [1897.9761],\n",
              "       [1867.2749],\n",
              "       [1844.6565],\n",
              "       [1906.6606],\n",
              "       [1899.3186],\n",
              "       [1960.2892],\n",
              "       [1956.9531],\n",
              "       [1897.9722],\n",
              "       [1851.2886],\n",
              "       [1828.8391],\n",
              "       [1845.2805],\n",
              "       [1841.4424],\n",
              "       [1801.5321],\n",
              "       [1795.954 ],\n",
              "       [1811.3864],\n",
              "       [1825.9618],\n",
              "       [1839.5643],\n",
              "       [1834.2837]], dtype=float32)"
            ]
          },
          "metadata": {},
          "execution_count": 14
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "D7QT1tPo5eSX"
      },
      "execution_count": 14,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "AUsTfrKK-rCe"
      },
      "execution_count": 14,
      "outputs": []
    }
  ]
}
